import F, { useState as m, useRef as H, useCallback as b, useEffect as f } from "react";
const v = (e) => {
  const [t, n] = m(0), [a, c] = m(!1), s = H(null), r = b(() => {
    s.current && n(s.current.height);
  }, []);
  return f(() => {
    const l = () => {
      c(!0), r();
    }, d = s.current;
    return d && (d.complete ? l() : d.addEventListener("load", l)), window.addEventListener("resize", r), () => {
      d && d.removeEventListener("load", l), window.removeEventListener("resize", r);
    };
  }, [e, r]), [s, t, a];
}, P = (e = {}) => {
  const [t, n] = m(!1), a = H(null);
  return f(() => {
    const c = new IntersectionObserver(
      (r) => {
        const [l] = r;
        l && (l.isIntersecting ? n(!0) : n(!1));
      },
      {
        ...e
      }
    ), { current: s } = a;
    return s && c.observe(s), () => {
      s && c.unobserve(s);
    };
  }, [e]), [a, t];
};
class x {
  constructor() {
    this.callbacks = /* @__PURE__ */ new Set(), this.animationFrameId = null;
  }
  static getInstance() {
    return x.instance || (x.instance = new x()), x.instance;
  }
  register(t) {
    this.callbacks.add(t), this.animationFrameId === null && this.start();
  }
  unregister(t) {
    this.callbacks.delete(t), this.callbacks.size === 0 && this.animationFrameId !== null && this.stop();
  }
  start() {
    const t = () => {
      this.callbacks.forEach((n) => n()), this.animationFrameId = requestAnimationFrame(t);
    };
    this.animationFrameId = requestAnimationFrame(t);
  }
  stop() {
    this.animationFrameId !== null && (cancelAnimationFrame(this.animationFrameId), this.animationFrameId = null);
  }
}
const k = x.getInstance(), z = (e, t) => e * t - e, A = (e, t) => Math.ceil(e / 100 * t - t / 2), C = (e, t) => {
  const { top: n, height: a } = e;
  let c = -a;
  const s = t;
  if (n < c)
    return 0;
  if (n > s)
    return 100;
  const r = (n - c) / (s - c) * 100;
  return Math.round(Math.min(Math.max(r, 0), 100) * 100) / 100;
}, N = (e, t) => {
  switch (t) {
    case "up":
      return `0, ${e}px, 0`;
    case "right":
      return `${-e}px, 0, 0`;
    case "down":
      return `0, ${-e}px, 0`;
    case "left":
      return `${e}px, 0, 0`;
    case "up left":
      return `${e}px, ${e}px, 0`;
    case "up right":
      return `${-e}px, ${e}px, 0`;
    case "down left":
      return `${e}px, ${-e}px, 0`;
    case "down right":
      return `${-e}px, ${-e}px, 0`;
    default:
      return `0, ${e}px, 0`;
  }
}, B = () => {
  const [e, t] = m(null);
  return f(() => {
    const n = () => {
      t(window.innerHeight);
    };
    if (typeof window < "u")
      return t(window.innerHeight), window.addEventListener("resize", n), () => {
        window.removeEventListener("resize", n);
      };
  }, []), e;
}, R = ({
  isLoaded: e,
  imageHeight: t,
  scale: n,
  boundingClientRect: a,
  orientation: c,
  maxTransition: s
}) => {
  const [r, l] = m(""), d = H({
    rangeMax: 0,
    lastImageHeight: 0,
    lastScale: 0,
    lastTranslateValue: -999999,
    lastTransformString: ""
  }), o = B();
  return f(() => {
    if (!e || !a || !o)
      return;
    const i = d.current;
    (i.lastImageHeight !== t || i.lastScale !== n) && (i.rangeMax = z(t, n), i.lastImageHeight = t, i.lastScale = n);
    let h = C(a, o);
    s && (h = Math.min(h, 100 - s));
    const p = A(h, i.rangeMax);
    if (i.lastTranslateValue !== p) {
      const g = N(p, c);
      g !== i.lastTransformString && (i.lastTranslateValue = p, i.lastTransformString = g, l(g));
    }
  }, [
    e,
    t,
    n,
    a,
    c,
    s,
    o
  ]), r;
}, j = () => {
  const [e, t] = m(!1);
  return f(() => {
    if (typeof window > "u")
      return;
    const n = window.matchMedia("(prefers-reduced-motion: reduce)");
    t(n.matches);
    const a = (c) => {
      t(c.matches);
    };
    return n.addEventListener("change", a), () => {
      n.removeEventListener("change", a);
    };
  }, []), e;
}, q = ({
  scale: e,
  overflow: t,
  delay: n,
  transition: a,
  orientation: c,
  maxTransition: s,
  isVisible: r,
  isLoaded: l,
  imageHeight: d,
  imageRef: o
}) => {
  const [i, h] = m(!1), [p, g] = m(0), [T, y] = m(
    null
  ), [$, E] = m(!1), u = j(), M = R({
    isLoaded: l,
    imageHeight: d,
    scale: e,
    boundingClientRect: T,
    orientation: c,
    maxTransition: s
  }), S = b(
    (w) => {
      if (!o.current || u || !w) return;
      let I = `translate3d(${w})`;
      t || (I += ` scale(${e})`), o.current.style.transform = I;
    },
    [o, e, t, u]
  ), L = b(
    (w) => {
      if (!o.current || u) return;
      const I = w && n > 0 ? `transform ${n}s ${a}` : "";
      o.current.style.transition = I;
    },
    [o, n, a, u]
  ), V = b(() => {
    var w;
    if (!(!r && i || u) && (window.scrollY !== p || !i)) {
      const I = (w = o.current) == null ? void 0 : w.getBoundingClientRect();
      I && y(I), i || setTimeout(() => {
        E(!0);
      }, 50), g(window.scrollY);
    }
  }, [p, r, o, i, u]);
  f(() => {
    M && (r || !i) && (S(M), h(!0));
  }, [M, r, i, S]), f(() => {
    !t && l && o.current && !u && (o.current.style.transform = `scale(${e})`);
  }, [e, t, l, u]), f(() => {
    L($);
  }, [$, L]), f(() => (u || k.register(V), () => {
    k.unregister(V);
  }), [V, u]), f(() => {
    u && o.current && (o.current.style.transform = "", o.current.style.transition = "");
  }, [u]);
};
var G = "/Users/geoffrey/Desktop/perso/simpleParallax.js/src/react/index.tsx";
const W = ({
  delay: e = 0.4,
  orientation: t = "up",
  scale: n = 1.4,
  overflow: a = !1,
  transition: c = "cubic-bezier(0,0,0,1)",
  maxTransition: s = null,
  children: r
}) => {
  var $;
  const l = t ?? "up", d = n ?? 1.2, o = ($ = r == null ? void 0 : r.props) == null ? void 0 : $.src, [i, h, p] = v(o), [g, T] = P({
    root: null,
    rootMargin: "0px",
    threshold: Array.from(Array(101).keys(), (E) => E / 100)
  });
  q({
    scale: d,
    overflow: a,
    delay: e,
    transition: c,
    orientation: l,
    maxTransition: s,
    isVisible: T,
    isLoaded: p,
    imageHeight: h,
    imageRef: i
  });
  const y = F.isValidElement(r) ? F.cloneElement(r, {
    ref: i
  }) : null;
  return /* @__PURE__ */ F.createElement("div", { ref: g, style: {
    overflow: a ? "visible" : "hidden"
  }, __self: void 0, __source: {
    fileName: G,
    lineNumber: 47,
    columnNumber: 3
  } }, y);
};
export {
  W as default
};
